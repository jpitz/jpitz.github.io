<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Mya Pitzeruse</title>
    <link>https://mjpitz.com/tags/golang/</link>
    <description>Recent content in golang on Mya Pitzeruse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mjpitz.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implementing Breadth-first Search Over gRPC</title>
      <link>https://mjpitz.com/blog/2020/08/03/bfs-over-grpc-stream/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mjpitz.com/blog/2020/08/03/bfs-over-grpc-stream/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://deps.cloud&#34;&gt;deps.cloud&lt;/a&gt; is an open source project that I started.
It&amp;rsquo;s a tool that helps companies understand how their projects relate to one another.
It does this by parsing files like &lt;code&gt;package.json&lt;/code&gt; and storing the contents in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_(abstract_data_type)&#34;&gt;graph&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While &lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_database&#34;&gt;graph databases&lt;/a&gt; do exist, finding administrative and engineering support is often hard.
To add complexity to this, graph databases come in a variety of flavors.&lt;br&gt;
Since I wanted the workload to be portable, adopting a graph database was a non-starter.&lt;/p&gt;
&lt;p&gt;On the other hand, finding support for relational databases is easy.
The problem is that implementing graphs on relational databases tend to be slow.
While there has been previous efforts, I felt &lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt; was able to alleviate many of the problems they faced.
In this post, I share lessons I learned while implementing such a graph database.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gitfs - A FUSE File System</title>
      <link>https://mjpitz.com/blog/2019/01/30/gitfs-a-fuse-file-system/</link>
      <pubDate>Wed, 30 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://mjpitz.com/blog/2019/01/30/gitfs-a-fuse-file-system/</guid>
      <description>&lt;p&gt;During my first employment at Indeed, I cloned every repository down to my machine.
This approach worked for a while when the number of repositories was small.
As the organization has grown, the solution quickly became unmanageable.
While many people do not work across every repository, many are familiar with the pain of setting up a new machine.
I wrote &lt;a href=&#34;https://github.com/mjpitz/gitfs&#34;&gt;gitfs&lt;/a&gt; for a few reasons.
First, to reduce the time spent setting up a new development environment.
Second, to remove the need to figure out where all my projects need to be cloned.
In this post, I discuss some challenges faced and lessons learned in writing my first file system.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>