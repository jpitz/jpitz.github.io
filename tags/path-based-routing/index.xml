<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>path-based routing on Mya Pitzeruse</title>
    <link>https://mjpitz.com/tags/path-based-routing/</link>
    <description>Recent content in path-based routing on Mya Pitzeruse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://mjpitz.com/tags/path-based-routing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Adventures in Path Based Routing</title>
      <link>https://mjpitz.com/blog/2020/11/10/path-based-routing-k8s/</link>
      <pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mjpitz.com/blog/2020/11/10/path-based-routing-k8s/</guid>
      <description>&lt;p&gt;Path based routing can be an extremely useful feature.
It enables you to serve a single page app and an API on the same domain.
This can often be helpful when starting a project, but don&amp;rsquo;t want to handle things like &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&#34;&gt;cross-origin resource sharing&lt;/a&gt;.
In a recent project, I wanted to split traffic between a static site hosted on GitHub (or S3) and an API running in the cluster.
In this post, I&amp;rsquo;ll demonstrate some less common approaches to path based routing using &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; resources.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>