<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>open-source on Mya Pitzeruse</title>
    <link>https://mjpitz.com/tags/open-source/</link>
    <description>Recent content in open-source on Mya Pitzeruse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://mjpitz.com/tags/open-source/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Renovate your GitOps</title>
      <link>https://mjpitz.com/blog/2020/12/03/renovate-your-gitops/</link>
      <pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mjpitz.com/blog/2020/12/03/renovate-your-gitops/</guid>
      <description>&lt;p&gt;Every engineering organization struggles to stay up to date with the latest versions of applications they run.
When an organization deploys an open source project, their versions start to drift from day one.
The longer a project runs without an update, the more likely it is to contain a vulnerability.
To help applications stay on top of library versions, the project &lt;a href=&#34;https://github.com/renovatebot/&#34;&gt;Renovate&lt;/a&gt; was developed.
Renovate works by parsing manifest files (like &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;go.mod&lt;/code&gt;) and checking for newer versions of libraries.
When Renovate discovers an update, it submits a pull request with the newer version to the project.&lt;/p&gt;
&lt;p&gt;Recently, I noticed Renovate submit pull requests for dependencies in my &lt;a href=&#34;https://helm.sh/&#34;&gt;Helm&lt;/a&gt; v3 charts.
This gave me an idea.
What if Renovate could automatically manage something like a GitOps repository?
This means organizations would no longer need to tediously query for newer versions of applications.
Instead, they&amp;rsquo;d automatically receive a pull request when an update becomes available.
In this blog post, I demonstrate how to set this up for an &lt;a href=&#34;https://github.com/argoproj/argo-cd/&#34;&gt;ArgoCD&lt;/a&gt; GitOps repository.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Learning Jsonnet</title>
      <link>https://mjpitz.com/blog/2020/10/12/learning-jsonnet/</link>
      <pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mjpitz.com/blog/2020/10/12/learning-jsonnet/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://jsonnet.org/&#34;&gt;Jsonnet&lt;/a&gt; is a powerful data templating language.
It extends JSON with variables, conditionals, functions, imports and more.
As an engineer who never touched the technology before, I often struggled to understand it.
In this post, I share my experience learning Jsonnet and my thoughts behind developing a starter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SLOs for Open Source</title>
      <link>https://mjpitz.com/blog/2020/09/30/slos-for-oss/</link>
      <pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mjpitz.com/blog/2020/09/30/slos-for-oss/</guid>
      <description>&lt;p&gt;Open source software has been used to build organizations for years.
From libraries to complex infrastructure systems, the open source landscape provides a vast sea of solutions.
For larger infrastructure projects, organizations are asking maintainers for &lt;a href=&#34;https://en.wikipedia.org/wiki/Service-level_objective&#34;&gt;service level objectives&lt;/a&gt; (SLOs).
Many do not publish or provide any, even when projects come from organizations who likely had SLOs in place.
In this post, I walk through my process for developing indicators and objectives for open source projects.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
