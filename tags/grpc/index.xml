<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grpc on Mya Pitzeruse</title>
    <link>https://mjpitz.com/tags/grpc/</link>
    <description>Recent content in grpc on Mya Pitzeruse</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 21 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://mjpitz.com/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Working with Protocol Buffers</title>
      <link>https://mjpitz.com/blog/2020/09/21/protobuf-experience/</link>
      <pubDate>Mon, 21 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mjpitz.com/blog/2020/09/21/protobuf-experience/</guid>
      <description>&lt;p&gt;Google&amp;rsquo;s &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/&#34;&gt;Protocol Buffers&lt;/a&gt; can be a power piece of technology.
Yet, I often feel they are undervalued, underutilized, and underappreciated.
Since joining &lt;a href=&#34;https://www.indeed.com&#34;&gt;Indeed&lt;/a&gt; back in 2013, I&amp;rsquo;ve had a fair amount of experience working with them.
&lt;a href=&#34;https://engineering.indeedblog.com/blog/2012/12/boxcar-self-balancing-distributed-services-protocol/&#34;&gt;Boxcar&lt;/a&gt; (Indeed&amp;rsquo;s distributed services framework) was built on protocol buffers.
As a previous maintainer of Boxcar, I&amp;rsquo;ve had hands on experience with low level components of protocol buffers.
In this post, I discuss many of the benefits to using the technology.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing Breadth-first Search Over gRPC</title>
      <link>https://mjpitz.com/blog/2020/08/06/bfs-over-grpc-stream/</link>
      <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://mjpitz.com/blog/2020/08/06/bfs-over-grpc-stream/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://deps.cloud&#34;&gt;deps.cloud&lt;/a&gt; is an open source project that I started.
It&amp;rsquo;s a tool that helps companies understand how their projects relate to one another.
It does this by parsing files like &lt;code&gt;package.json&lt;/code&gt; and storing the contents in a &lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_(abstract_data_type)&#34;&gt;graph&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While &lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_database&#34;&gt;graph databases&lt;/a&gt; do exist, finding administrative and engineering support is often hard.
To add complexity to this, graph databases come in a variety of flavors.
Since I wanted the workload to be portable, adopting a graph database was a non-starter.&lt;/p&gt;
&lt;p&gt;On the other hand, finding support for relational databases is easy.
The problem is that implementing graphs on relational databases tend to be slow.
While there has been previous efforts, I felt &lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt; was able to alleviate many of the problems they faced.
In this post, I share lessons I learned while implementing such a graph database.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
